name: homelab
description: My homelab IaC configuration
runtime:
  name: python
  options:
    virtualenv: .venv
    typechecker: mypy
config:
  pulumi:tags:
    value:
      pulumi:template: python
  homelab:docker:
    value:
      network:
        default-bridge: {}
        internal-bridge: {}
      images:
        remote:
          tailscale:
            repo: tailscale/tailscale
            tag: "v1.78.3"
          traefik:
            repo: traefik
            tag: "v3.3.2"
          dozzle:
            repo: amir20/dozzle
            tag: "v8.10.7"
          nghe:
            repo: ghcr.io/vnghia/nghe-musl
            tag: "0.10.1"
          memos:
            repo: ghcr.io/usememos/memos
            tag: "0.24.0"
          dagu:
            repo: ghcr.io/dagu-org/dagu
            tag: "1.16.3"
          minideb:
            repo: bitnami/minideb
            tag: "bookworm"
            delete-before-replace: true
          resticprofile:
            repo: creativeprojects/resticprofile
            tag: "0.29.1"
        build:
          barman:
            context:
              location: service/homelab-barman-service/image
              base: minideb
      database:
        postgres:
          images:
            postgres:
              # TODO: use postgres 17 after https://github.com/EnterpriseDB/barman/issues/1041
              "17":
                repo: postgres
                tag: "17.2-bookworm"
              "16":
                repo: postgres
                tag: "16.6-bookworm"
          version: 16
          port: 5432
          data-dir: /var/lib/postgresql/data
          env:
            username: POSTGRES_USER
            password: POSTGRES_PASSWORD
            database: POSTGRES_DB
            data-dir: PGDATA
          container:
            healthcheck:
              tests:
                - "CMD"
                - "pg_isready"
                - "-U"
                - source:
                    env: POSTGRES_DB
              interval: 5s
              retries: 5
              timeout: 5s
            tmpfs:
              - /var/run/postgresql
            volumes:
              postgres-docker-entrypoint-initdb:
                path: /docker-entrypoint-initdb.d
                read-only: true
      plugins:
        rclone:
          repo: rclone/docker-volume-rclone
          tag:
            template: "{platform}-1.69.0"
      volumes:
        local:
          tailscale-data: {}
          traefik-config:
            backup: false
          traefik-cert: {}
          nghe-cache: {}
          memos-data: {}
          dagu-home: {}
          dagu-dags:
            backup: false
          barman-home: {}
          barman-config:
            backup: false
          restic-cache:
            backup: false
          restic-tmp:
            backup: false
          restic-profile:
            backup: false
          postgres-docker-entrypoint-initdb:
            backup: false
      services:
        tailscale:
          container:
            image: tailscale
            capabilities:
              - NET_ADMIN
            healthcheck:
              tests:
                [
                  "CMD",
                  "wget",
                  "--spider",
                  "-q",
                  "http://localhost:9002/healthz",
                ]
              interval: 1s
              timeout: 5s
            network:
              default-bridge: true
            ports:
              httpv4:
                internal: 81
                external: 80
                ip: "0.0.0.0"
              httpv6:
                internal: 81
                external: 80
                ip: "::"
              httpsv4:
                internal: 444
                external: 443
                ip: "0.0.0.0"
              httpsv6:
                internal: 444
                external: 443
                ip: "::"
            tmpfs:
              - /tmp
              - /run
            volumes:
              tailscale-data: /var/lib/tailscale
            envs:
              TS_STATE_DIR:
                volume: tailscale-data
              TS_USERSPACE: false
              TS_AUTH_ONCE: true
              TS_ENABLE_HEALTH_CHECK: true
        traefik:
          config:
            path: /proxy
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              storage:
                public:
                  volume: traefik-cert
                  path: acme-public.json
                private:
                  volume: traefik-cert
                  path: acme-private.json
            provider:
              file: dynamic
            entrypoint:
              public-http: "public-http"
              private-http: "private-http"
              public-https: "public-https"
              private-https: "private-https"
          container:
            image: traefik
            command:
              - "traefik"
              - "--configFile"
              - source:
                  volume: traefik-config
                transform:
                  path: static.toml
            healthcheck:
              tests: ["CMD", "traefik", "healthcheck", "--ping"]
              interval: 1s
              timeout: 5s
              retries: 5
            network:
              service: tailscale
            volumes:
              traefik-config:
                path: /etc/traefik/config
                read-only: true
              traefik-cert: /etc/traefik/cert
        dozzle:
          container:
            image: dozzle
            docker-socket:
              write: false
            healthcheck:
              tests: ["CMD", "/dozzle", "healthcheck"]
              interval: 3s
              timeout: 30s
              retries: 5
              start-period: 30s
            envs:
              DOZZLE_BASE: /log
              DOZZLE_ADDR: ":8080"
              DOZZLE_NO_ANALYTICS: true
              DOZZLE_ENABLE_ACTIONS: true
        nghe:
          config:
            traefik:
              public: true
              service:
                port:
                  env: NGHE_SERVER__PORT
          databases:
            postgres:
              postgres: {}
          container:
            image: nghe
            database:
              postgres:
              envs:
                env: NGHE_DATABASE__URL
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - source:
                    env: NGHE_SERVER__PORT
                  transform:
                    string:
                      template: "http://localhost:{value}/rest/health"
              interval: 1s
              timeout: 5s
            network:
              default-bridge: true
            volumes:
              nghe-cache: /tmp/nghe
            envs:
              NGHE_SERVER__PORT: 3000
              NGHE_S3__ENABLE: true
        memos:
          config:
            traefik:
              public: true
              service:
                port:
                  env: MEMOS_PORT
          databases:
            postgres:
              postgres: {}
          container:
            image: memos
            database:
              postgres:
              envs:
                env: MEMOS_DSN
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - source:
                    env: MEMOS_PORT
                  transform:
                    string:
                      template: "http://localhost:{value}/healthz"
              interval: 1s
              timeout: 5s
            volumes:
              memos-data: /var/opt/memos
            envs:
              MEMOS_PORT: 5230
              MEMOS_DATA:
                volume: memos-data
              MEMOS_DRIVER: postgres
        dagu:
          config:
            dags-dir:
              extract:
                env: DAGU_DAGS_DIR
            log-dir:
              extract:
                env: DAGU_LOG_DIR
            traefik:
              public: false
              service:
                port:
                  env: DAGU_PORT
          container:
            image: dagu
            command: ["start-all"]
            docker-socket:
              write: true
            entrypoint: ["dagu"]
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "-q"
                - source:
                    env: DAGU_PORT
                  transform:
                    string:
                      template: "http://localhost:{value}/api/v1/health"
                - "-O"
                - "/dev/null"
              interval: 1s
              timeout: 5s
            tmpfs:
              - /tmp
            volumes:
              dagu-home: /config
              dagu-dags:
                path: /config/dags
                read-only: true
            envs:
              DAGU_PORT: 8080
              DAGU_DAGS_DIR:
                volume: dagu-dags
              DAGU_BASE_CONFIG:
                source:
                  volume: dagu-dags
                transform:
                  path: base.yaml
              DAGU_LOG_DIR:
                source:
                  volume: dagu-home
                transform:
                  path: logs
              DAGU_DATA_DIR:
                source:
                  volume: dagu-home
                transform:
                  path: data
              DAGU_SUSPEND_FLAGS_DIR:
                source:
                  volume: dagu-home
                transform:
                  path: suspend
              DAGU_ADMIN_LOG_DIR:
                source:
                  volume: dagu-home
                transform:
                  path: admin
        barman:
          config:
            config-dir:
              extract:
                volume: barman-config
            staging-dir:
              extract:
                source:
                  volume: barman-home
                transform:
                  path: staging
            minimum-redundancy: 5
            last-backup-maximum-age: 1 WEEKS
            retention-policy: RECOVERY WINDOW OF 1 WEEKS
            dagu:
              executor:
                exec:
                  container:
              dag:
                max-active-runs: 1
                params:
                  types:
                    backup:
                tags: ["backup"]
              command:
                prefix: ["barman"]
                suffix:
                  - param:
                      type: backup
              dags:
                check:
                  dag:
                    schedule: "0 2 * * *" # 2am every day
                  command: ["check"]
                backup:
                  command: ["backup", "--wait"]
                switch-wal:
                  command: ["switch-wal", "--force", "--archive"]
          container:
            image:
              build: barman
            init: true
            tmpfs:
              - /var/run
            volumes:
              barman-config:
                path: /etc/barman.d
                read-only: true
              barman-home: /var/lib/barman
        restic:
          config:
            image: resticprofile
            profile-dir:
              extract:
                source:
                  volume: restic-profile
            cache-dir:
              extract:
                source:
                  env: RESTIC_CACHE_DIR
            repo:
              prefix: backup/restic
            keep:
              last:
                daily: 7
            dagu:
              executor:
                run:
                  model:
              dag:
                max-active-runs: 1
                params:
                  types:
                    backup:
                tags: ["backup"]
              dags:
                check:
                  dag:
                    schedule: "0 2 * * sat" # 2am every saturday
                  command: ["check", "--read-data"]
                snapshots:
                  command: ["snapshots"]
                backup:
                  command:
                    - "-n"
                    - param:
                        type: backup
                    - "backup"
                forget:
                  command:
                    - "-n"
                    - param:
                        type: backup
                    - "backup"
          container:
            active: false
            image: resticprofile
            network:
              default-bridge: true
              internal-bridge: false
            volumes:
              restic-cache: /cache
              restic-tmp: /tmp
              restic-profile:
                path: /etc/resticprofile
                read-only: true
            envs:
              RESTIC_CACHE_DIR:
                source:
                  volume: restic-cache
        backup:
          config:
            schedule: "0 0 * * *"
            tags: ["backup"]
