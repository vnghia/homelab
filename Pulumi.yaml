name: homelab
description: My homelab IaC configuration
runtime:
  name: python
  options:
    toolchain: uv
    virtualenv: .venv
    typechecker: mypy
config:
  pulumi:tags:
    value:
      pulumi:template: python
  homelab:docker:
    value:
      network:
        default-bridge: {}
        internal-bridge: {}
      images:
        remote:
          tailscale:
            repo: tailscale/tailscale
            tag: "v1.78.3"
          traefik:
            repo: traefik
            tag: "v3.3.2"
          dozzle:
            repo: ghcr.io/amir20/dozzle
            tag: "v8.10.7"
          nghe:
            repo: ghcr.io/vnghia/nghe-musl
            tag: "0.10.1"
          memos:
            repo: ghcr.io/usememos/memos
            tag: "0.24.0"
          dagu:
            repo: ghcr.io/dagu-org/dagu
            tag: "1.16.3"
          minideb:
            repo: bitnami/minideb
            tag: "bookworm"
            delete-before-replace: true
          resticprofile:
            repo: creativeprojects/resticprofile
            tag: "0.29.1"
          crowdsec:
            repo: ghcr.io/crowdsecurity/crowdsec
            tag: "v1.6.5"
          ntfy:
            repo: binwiederhier/ntfy
            tag: "v2.11.0"
          monica:
            repo: ghcr.io/monicahq/monica-next
            tag: "main"
            delete-before-replace: true
        build:
          barman:
            context:
              location: service/homelab-barman-service/image
              base: minideb
      database:
        postgres:
          images:
            postgres:
              "17":
                repo: postgres
                tag: "17.4-bookworm"
          version: 17
          port: 5432
          data-dir: /var/lib/postgresql/data
          env:
            username: POSTGRES_USER
            password: POSTGRES_PASSWORD
            database: POSTGRES_DB
            data-dir: PGDATA
          container:
            healthcheck:
              tests:
                - "CMD"
                - "pg_isready"
                - "-U"
                - env: POSTGRES_DB
              interval: 30s
              retries: 5
              timeout: 5s
            tmpfs:
              - /var/run/postgresql
            volumes:
              postgres-docker-entrypoint-initdb:
                path: /docker-entrypoint-initdb.d
                read-only: true
        redis:
          images:
            redis:
              "7":
                repo: bitnami/redis
                tag: "7.4.2"
          version: 7
          port: 6379
          data-dir: /bitnami/redis/data
          tmp-dir: /opt/bitnami/redis
          env:
            password: REDIS_PASSWORD
            database: REDIS_DATABASE
            data-dir: REDIS_DATA_DIR
          container:
            healthcheck:
              tests:
                - "CMD"
                - "redis-cli"
                - "--raw"
                - "incr"
                - "ping"
              interval: 30s
              retries: 5
              timeout: 5s
      plugins:
        rclone:
          repo: rclone/docker-volume-rclone
          tag:
            template: "{platform}-1.69.0"
      volumes:
        local:
          tailscale-data: {}
          traefik-config:
            backup: false
          traefik-cert: {}
          traefik-plugin:
            backup: false
          nghe-cache: {}
          memos-data: {}
          dagu-home: {}
          dagu-dags:
            backup: false
          crowdsec-data: {}
          crowdsec-config: {}
          ntfy-cache: {}
          ntfy-data:
            backup: false
          monica-data:
            backup: false
          barman-home: {}
          barman-config:
            backup: false
          restic-cache:
            backup: false
          restic-profile:
            backup: false
          postgres-docker-entrypoint-initdb:
            backup: false
      services:
        tailscale:
          container:
            image: tailscale
            capabilities:
              - NET_ADMIN
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - "http://localhost:9002/healthz"
              interval: 30s
              timeout: 5s
            network:
              default-bridge: true
            ports:
              httpv4:
                internal: 81
                external: 80
                ip: "0.0.0.0"
              httpv6:
                internal: 81
                external: 80
                ip: "::"
              httpsv4:
                internal: 444
                external: 443
                ip: "0.0.0.0"
                protocol: tcp
              httpsv6:
                internal: 444
                external: 443
                ip: "::"
                protocol: tcp
              httpsv4-udp:
                internal: 444
                external: 443
                ip: "0.0.0.0"
                protocol: udp
              httpsv6-udp:
                internal: 444
                external: 443
                ip: "::"
                protocol: udp
            tmpfs:
              - /tmp
              - /run
            volumes:
              tailscale-data: /var/lib/tailscale
            envs:
              TS_STATE_DIR:
                volume: tailscale-data
              TS_USERSPACE: false
              TS_AUTH_ONCE: true
              TS_ENABLE_HEALTH_CHECK: true
        traefik:
          variables:
            CERT_PATH:
              extract:
                volume: traefik-cert
              transform:
                path: acme.json
            CONFIG_PATH:
              volume: traefik-config
            STATIC_PATH:
              extract:
                variable: CONFIG_PATH
              transform:
                path: static.toml
            API_PATH: /proxy
          config:
            path:
              static:
                variable: STATIC_PATH
              dynamic:
                extract:
                  variable: CONFIG_PATH
                transform:
                  path: dynamic
              api:
                variable: API_PATH
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              storage:
                variable: CERT_PATH
            entrypoint:
              public-http: "public-http"
              private-http: "private-http"
              public-https: "public-https"
              private-https: "private-https"
            plugins:
              crowdsec:
                name: github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
                version: "v1.4.1"
            traefik:
              crowdsec:
                name: crowdsec
                plugin: crowdsec
                data:
                  enabled: true
                  crowdsecMode: stream
                  crowdseclapikey:
                    service: crowdsec
                    extract:
                      secret: traefik
                  crowdsecLapiHost:
                    service: crowdsec
                    extract:
                      name:
                    transform:
                      string:
                        template: "{value}:8080"
              dashboard:
                name: dashboard
                public: false
                hostname: system
                prefix:
                  variable: API_PATH
                service: "api@internal"
          container:
            image: traefik
            command:
              - "traefik"
              - "--configFile"
              - variable: STATIC_PATH
            healthcheck:
              tests: ["CMD", "traefik", "healthcheck", "--ping"]
              interval: 30s
              timeout: 5s
              retries: 5
            labels:
              crowdsec.enable: true
              crowdsec.labels.type: traefik
            network:
              service: tailscale
            volumes:
              traefik-config:
                path: /etc/traefik/config
                read-only: true
              traefik-cert: /etc/traefik/cert
              traefik-plugin: /plugins-storage
        crowdsec:
          config:
            docker:
              acquis-dir:
                extract:
                  volume: crowdsec-config
                transform:
                  path: acquis.d
              check-interval: 10s
          secrets:
            traefik:
              length: 32
              special: false
          container:
            image: crowdsec
            docker-socket:
              write: false
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - "http://localhost:8080/health"
              interval: 30s
              timeout: 5s
            envs:
              BOUNCER_KEY_traefik:
                secret: traefik
              ENROLL_KEY:
              ENROLL_INSTANCE_NAME:
                docker: "{project}-{stack}"
              COLLECTIONS: crowdsecurity/traefik
            network:
              default-bridge: true
            tmpfs:
              - /tmp
            volumes:
              crowdsec-data: /var/lib/crowdsec/data
              crowdsec-config: /etc/crowdsec
        ntfy:
          config:
            traefik:
              traefik:
                public: true
                hostname: ntfy
                service:
                  port:
                    extract:
                      env: NTFY_LISTEN_HTTP
                    transform:
                      string:
                        capture: ":(\\d+)"
          secrets:
            admin-username:
              length: 16
              special: false
            admin-password: {}
            user-username:
              length: 16
              special: false
            user-password: {}
          container:
            image: ntfy
            command: ["serve"]
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - extract:
                    env: NTFY_LISTEN_HTTP
                  transform:
                    string:
                      capture: ":(\\d+)"
                      template: "http://localhost:{value}/v1/health"
              interval: 30s
              timeout: 5s
            envs:
              NTFY_BASE_URL:
                extract:
                  hostname: ntfy
                  public: true
                  scheme: https
              NTFY_LISTEN_HTTP: ":8080"
              NTFY_CACHE_FILE:
                extract:
                  volume: ntfy-cache
                transform:
                  path: cache.db
              NTFY_AUTH_FILE:
                extract:
                  volume: ntfy-data
                transform:
                  path: auth.db
              NTFY_AUTH_DEFAULT_ACCESS: "deny-all"
              NTFY_BEHIND_PROXY: true
              NTFY_ATTACHMENT_CACHE_DIR:
                extract:
                  volume: ntfy-cache
                transform:
                  path: attachment
              NTFY_ENABLE_SIGNUP: false
              NTFY_ENABLE_RESERVATIONS: false
              NTFY_ENABLE_METRICS: false
              NTFY_LOG_FORMAT: json
            volumes:
              ntfy-cache: /var/cache/ntfy
              ntfy-data: /var/lib/ntfy
        dozzle:
          config:
            traefik:
              traefik:
                public: false
                hostname: system
                service:
                  port:
                    extract:
                      env: DOZZLE_ADDR
                    transform:
                      string:
                        capture: ":(\\d+)"
                middlewares:
                  - name: redirect
                    data:
                      redirectRegex:
                        regex: "^https://([^/]+)/?$"
                        replacement:
                          extract:
                            env: DOZZLE_BASE
                          transform:
                            string:
                              template: "https://${{1}}{value}/"
          container:
            image: dozzle
            docker-socket:
              write: false
            healthcheck:
              tests: ["CMD", "/dozzle", "healthcheck"]
              interval: 30s
              timeout: 30s
              retries: 5
              start-period: 30s
            envs:
              DOZZLE_BASE: /log
              DOZZLE_ADDR: ":8080"
              DOZZLE_FILTER:
                docker: "label=pulumi.stack={stack}"
              DOZZLE_NO_ANALYTICS: true
              DOZZLE_ENABLE_ACTIONS: true
        nghe:
          config:
            traefik:
              traefik:
                public: true
                service:
                  port:
                    env: NGHE_SERVER__PORT
          databases:
            postgres:
              postgres: {}
          secrets:
            key:
              length: 16
          container:
            image: nghe
            databases:
              - postgres:
                envs:
                  env: NGHE_DATABASE__URL
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - extract:
                    env: NGHE_SERVER__PORT
                  transform:
                    string:
                      template: "http://localhost:{value}/rest/health"
              interval: 30s
              timeout: 5s
            network:
              default-bridge: true
            volumes:
              nghe-cache: /tmp/nghe
            envs:
              NGHE_SERVER__PORT: 3000
              NGHE_DATABASE__KEY:
                extract:
                  secret: key
                transform:
                  secret:
                    encode: hex
              NGHE_S3__ENABLE: true
              NGHE_INTEGRATION__SPOTIFY__ID:
              NGHE_INTEGRATION__SPOTIFY__SECRET:
              NGHE_INTEGRATION__LASTFM__KEY:
        memos:
          config:
            traefik:
              traefik:
                public: true
                service:
                  port:
                    env: MEMOS_PORT
          databases:
            postgres:
              postgres: {}
          container:
            image: memos
            databases:
              - postgres:
                envs:
                  env: MEMOS_DSN
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "--spider"
                - "-q"
                - extract:
                    env: MEMOS_PORT
                  transform:
                    string:
                      template: "http://localhost:{value}/healthz"
              interval: 30s
              timeout: 5s
            volumes:
              memos-data: /var/opt/memos
            envs:
              MEMOS_PORT: 5230
              MEMOS_DATA:
                volume: memos-data
              MEMOS_DRIVER: postgres
        dagu:
          config:
            dags-dir:
              extract:
                env: DAGU_DAGS_DIR
            log-dir:
              extract:
                env: DAGU_LOG_DIR
            traefik:
              traefik:
                public: false
                service:
                  port:
                    env: DAGU_PORT
          container:
            image: dagu
            command: ["start-all"]
            docker-socket:
              write: true
            entrypoint: ["dagu"]
            healthcheck:
              tests:
                - "CMD"
                - "wget"
                - "-q"
                - extract:
                    env: DAGU_PORT
                  transform:
                    string:
                      template: "http://localhost:{value}/api/v1/health"
                - "-O"
                - "/dev/null"
              interval: 30s
              timeout: 5s
            tmpfs:
              - /tmp
            volumes:
              dagu-home: /config
              dagu-dags:
                path: /config/dags
                read-only: true
            envs:
              DAGU_PORT: 8080
              DAGU_TZ:
                docker: "{timezone}"
              DAGU_DAGS_DIR:
                volume: dagu-dags
              DAGU_BASE_CONFIG:
                extract:
                  volume: dagu-dags
                transform:
                  path: base.yaml
              DAGU_LOG_DIR:
                extract:
                  volume: dagu-home
                transform:
                  path: logs
              DAGU_DATA_DIR:
                extract:
                  volume: dagu-home
                transform:
                  path: data
              DAGU_SUSPEND_FLAGS_DIR:
                extract:
                  volume: dagu-home
                transform:
                  path: suspend
              DAGU_ADMIN_LOG_DIR:
                extract:
                  volume: dagu-home
                transform:
                  path: admin
        monica:
          config:
            traefik:
              traefik:
                public: true
                service:
                  port: 80
          databases:
            postgres:
              postgres: {}
            redis:
              redis: {}
          secrets:
            key:
              length: 32
          container:
            image: monica
            databases:
              - postgres:
                envs:
                  username: DB_USERNAME
                  password: DB_PASSWORD
                  database: DB_DATABASE
                  host: DB_HOST
                  port: DB_PORT
              - redis:
                envs:
                  password: REDIS_PASSWORD
                  host: REDIS_HOST
                  port: REDIS_PORT
            envs:
              APP_NAME:
              APP_ENV: production
              APP_KEY:
                secret: key
              APP_DEBUG: false
              APP_URL:
                hostname: monica
                public: true
                scheme: https
              APP_TIMEZONE:
                docker: "{timezone}"
              APP_TRUSTED_PROXIES: "*"
              LOG_STACK: stderr
              DB_CONNECTION: pgsql
              CACHE_STORE: redis
              QUEUE_CONNECTION: redis
              SESSION_DRIVER: redis
              DEFAULT_STORAGE_LIMIT: 0
            network:
              default-bridge: true
            tmpfs:
              - /var/run
            volumes:
              monica-data: /var/www/html
          containers:
            queue:
              inherit:
              command: ["php", "artisan", "queue:work", "redis", "--json"]
        barman:
          config:
            config-dir:
              volume: barman-config
            staging-dir:
              extract:
                volume: barman-home
              transform:
                path: staging
            minimum-redundancy: 5
            last-backup-maximum-age: 1 WEEKS
            retention-policy: RECOVERY WINDOW OF 1 WEEKS
            dagu:
              executor:
                exec:
                  container:
              dag:
                max-active-runs: 1
                params:
                  types:
                    backup:
                tags: ["backup"]
              command:
                prefix: ["barman"]
                suffix:
                  - param:
                      type: backup
              dags:
                check:
                  dag:
                    schedule: "0 2 * * *" # 2am every day
                  command: ["check"]
                backup:
                  # TODO: re-enable --wait option after https://github.com/EnterpriseDB/barman/issues/1041
                  command: ["backup"]
                switch-wal:
                  command: ["switch-wal", "--force", "--archive"]
          container:
            image:
              build: barman
            init: true
            tmpfs:
              - /var/run
            volumes:
              barman-config:
                path: /etc/barman.d
                read-only: true
              barman-home: /var/lib/barman
        restic:
          config:
            image: resticprofile
            profile-dir:
              volume: restic-profile
            cache-dir:
              env: RESTIC_CACHE_DIR
            repo:
              prefix: backup/restic
            password:
              secret: password
            keep:
              last:
                daily: 7
            dagu:
              executor:
                run:
                  model:
              dag:
                max-active-runs: 1
                params:
                  types:
                    backup:
                tags: ["backup"]
              dags:
                check:
                  dag:
                    schedule: "0 2 * * sat" # 2am every saturday
                  command: ["check", "--read-data"]
                snapshots:
                  command: ["snapshots"]
                backup:
                  command:
                    - "-n"
                    - param:
                        type: backup
                    - "backup"
                forget:
                  command:
                    - "-n"
                    - param:
                        type: backup
                    - "backup"
          secrets:
            password:
              protect: true
          container:
            active: false
            image: resticprofile
            network:
              default-bridge: true
              internal-bridge: false
            tmpfs:
              - /tmp
            volumes:
              restic-cache: /cache
              restic-profile:
                path: /etc/resticprofile
                read-only: true
            envs:
              RESTIC_CACHE_DIR:
                volume: restic-cache
        backup:
          config:
            schedule: "0 0 * * *"
            tags: ["backup"]
